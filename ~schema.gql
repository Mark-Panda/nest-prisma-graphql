# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

directive @lower on FIELD_DEFINITION

type TagCount {
  articles: Int!
}

type Tag {
  id: ID!
  name: String!
  articles: [Article!]
  _count: TagCount!
}

type Comment {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  body: String!
  author: User!
  authorId: String!
  article: Article
  articleId: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ArticleCount {
  tags: Int!
  favoritedBy: Int!
  comments: Int!
}

type Article {
  id: ID!
  slug: String!
  title: String!
  description: String!
  body: String!
  tags: [Tag!]
  createdAt: DateTime!
  updatedAt: DateTime!
  favoritesCount: Int!
  author: User!
  authorId: String!
  favoritedBy: [User!]
  comments: [Comment!]
  active: Boolean
  _count: ArticleCount!
}

type Profile {
  id: ID!
  user: User!
  userId: String!
  dummy: String
}

type UserCount {
  following: Int!
  followers: Int!
  favoriteArticles: Int!
  articles: Int!
  comments: Int!
}

"""用户信息"""
type User {
  id: ID!
  email: String!

  """User's name"""
  name: String!
  bio: String
  image: String
  following: [User!]
  followers: [User!]
  favoriteArticles: [Article!]
  articles: [Article!]
  comments: [Comment!]
  countComments: Int
  rating: Float
  role: Role
  profile: Profile
  _count: UserCount!
}

enum Role {
  USER
}

type UserCountAggregate {
  id: Int!
  email: Int!
  name: Int!
  bio: Int!
  image: Int!
  countComments: Int!
  rating: Int!
  role: Int!
  _all: Int!
}

type UserAvgAggregate {
  countComments: Float
  rating: Float
}

type UserSumAggregate {
  countComments: Int
  rating: Float
}

type UserMinAggregate {
  id: String
  email: String
  name: String
  bio: String
  image: String
  countComments: Int
  rating: Float
  role: Role
}

type UserMaxAggregate {
  id: String
  email: String
  name: String
  bio: String
  image: String
  countComments: Int
  rating: Float
  role: Role
}

type AggregateUser {
  _count: UserCountAggregate
  _avg: UserAvgAggregate
  _sum: UserSumAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

type AffectedRows {
  count: Int!
}

type TagCountAggregate {
  id: Int!
  name: Int!
  _all: Int!
}

type TagMinAggregate {
  id: String
  name: String
}

type TagMaxAggregate {
  id: String
  name: String
}

type AggregateTag {
  _count: TagCountAggregate
  _min: TagMinAggregate
  _max: TagMaxAggregate
}

type ArticleCountAggregate {
  id: Int!
  slug: Int!
  title: Int!
  description: Int!
  body: Int!
  createdAt: Int!
  updatedAt: Int!
  favoritesCount: Int!
  authorId: Int!
  active: Int!
  _all: Int!
}

type ArticleAvgAggregate {
  favoritesCount: Float
}

type ArticleSumAggregate {
  favoritesCount: Int
}

type ArticleMinAggregate {
  id: String
  slug: String
  title: String
  description: String
  body: String
  createdAt: DateTime
  updatedAt: DateTime
  favoritesCount: Int
  authorId: String
  active: Boolean
}

type ArticleMaxAggregate {
  id: String
  slug: String
  title: String
  description: String
  body: String
  createdAt: DateTime
  updatedAt: DateTime
  favoritesCount: Int
  authorId: String
  active: Boolean
}

type AggregateArticle {
  _count: ArticleCountAggregate
  _avg: ArticleAvgAggregate
  _sum: ArticleSumAggregate
  _min: ArticleMinAggregate
  _max: ArticleMaxAggregate
}

type CommentCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  body: Int!
  authorId: Int!
  articleId: Int!
  _all: Int!
}

type CommentMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  body: String
  authorId: String
  articleId: String
}

type CommentMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  body: String
  authorId: String
  articleId: String
}

type AggregateComment {
  _count: CommentCountAggregate
  _min: CommentMinAggregate
  _max: CommentMaxAggregate
}

type ProfileCountAggregate {
  id: Int!
  userId: Int!
  dummy: Int!
  _all: Int!
}

type ProfileAvgAggregate {
  id: Float
}

type ProfileSumAggregate {
  id: Int
}

type ProfileMinAggregate {
  id: Int
  userId: String
  dummy: String
}

type ProfileMaxAggregate {
  id: Int
  userId: String
  dummy: String
}

type AggregateProfile {
  _count: ProfileCountAggregate
  _avg: ProfileAvgAggregate
  _sum: ProfileSumAggregate
  _min: ProfileMinAggregate
  _max: ProfileMaxAggregate
}

type Dummy {
  id: ID!
  created: DateTime!
  floaty: Float!
  int: Int
  float: Float
  bytes: String
  decimal: Decimal
  bigInt: String
  json: JSON
  friends: [String!]
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type DummyCountAggregate {
  id: Int!
  created: Int!
  floaty: Int!
  int: Int!
  float: Int!
  bytes: Int!
  decimal: Int!
  bigInt: Int!
  json: Int!
  friends: Int!
  _all: Int!
}

type DummyAvgAggregate {
  floaty: Float
  int: Float
  float: Float
  decimal: Decimal
  bigInt: Float
}

type DummySumAggregate {
  floaty: Float
  int: Int
  float: Float
  decimal: Decimal
  bigInt: String
}

type DummyMinAggregate {
  id: String
  created: DateTime
  floaty: Float
  int: Int
  float: Float
  bytes: String
  decimal: Decimal
  bigInt: String
}

type DummyMaxAggregate {
  id: String
  created: DateTime
  floaty: Float
  int: Int
  float: Float
  bytes: String
  decimal: Decimal
  bigInt: String
}

type AggregateDummy {
  _count: DummyCountAggregate
  _avg: DummyAvgAggregate
  _sum: DummySumAggregate
  _min: DummyMinAggregate
  _max: DummyMaxAggregate
}

type Query {
  user(where: UserWhereUniqueInput!): User!
  userFirst(where: UserWhereInput, orderBy: [UserOrderByWithRelationAndSearchRelevanceInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): User!
  users(where: UserWhereInput, orderBy: [UserOrderByWithRelationAndSearchRelevanceInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  userAggregate(where: UserWhereInput, orderBy: [UserOrderByWithRelationAndSearchRelevanceInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, _count: UserCountAggregateInput, _avg: UserAvgAggregateInput, _sum: UserSumAggregateInput, _min: UserMinAggregateInput, _max: UserMaxAggregateInput): AggregateUser!
  tag(where: TagWhereUniqueInput!): Tag!
  tagFirst(where: TagWhereInput, orderBy: [TagOrderByWithRelationAndSearchRelevanceInput!], cursor: TagWhereUniqueInput, take: Int, skip: Int, distinct: [TagScalarFieldEnum!]): Tag!
  tags(where: TagWhereInput, orderBy: [TagOrderByWithRelationAndSearchRelevanceInput!], cursor: TagWhereUniqueInput, take: Int, skip: Int, distinct: [TagScalarFieldEnum!]): [Tag!]!
  tagAggregate(where: TagWhereInput, orderBy: [TagOrderByWithRelationAndSearchRelevanceInput!], cursor: TagWhereUniqueInput, take: Int, skip: Int, _count: TagCountAggregateInput, _min: TagMinAggregateInput, _max: TagMaxAggregateInput): AggregateTag!
  article(where: ArticleWhereUniqueInput!): Article!
  articleFirst(where: ArticleWhereInput, orderBy: [ArticleOrderByWithRelationAndSearchRelevanceInput!], cursor: ArticleWhereUniqueInput, take: Int, skip: Int, distinct: [ArticleScalarFieldEnum!]): Article!
  articles(where: ArticleWhereInput, orderBy: [ArticleOrderByWithRelationAndSearchRelevanceInput!], cursor: ArticleWhereUniqueInput, take: Int, skip: Int, distinct: [ArticleScalarFieldEnum!]): [Article!]!
  articleAggregate(where: ArticleWhereInput, orderBy: [ArticleOrderByWithRelationAndSearchRelevanceInput!], cursor: ArticleWhereUniqueInput, take: Int, skip: Int, _count: ArticleCountAggregateInput, _avg: ArticleAvgAggregateInput, _sum: ArticleSumAggregateInput, _min: ArticleMinAggregateInput, _max: ArticleMaxAggregateInput): AggregateArticle!
  comment(where: CommentWhereUniqueInput!): Comment!
  commentFirst(where: CommentWhereInput, orderBy: [CommentOrderByWithRelationAndSearchRelevanceInput!], cursor: CommentWhereUniqueInput, take: Int, skip: Int, distinct: [CommentScalarFieldEnum!]): Comment!
  comments(where: CommentWhereInput, orderBy: [CommentOrderByWithRelationAndSearchRelevanceInput!], cursor: CommentWhereUniqueInput, take: Int, skip: Int, distinct: [CommentScalarFieldEnum!]): [Comment!]!
  commentAggregate(where: CommentWhereInput, orderBy: [CommentOrderByWithRelationAndSearchRelevanceInput!], cursor: CommentWhereUniqueInput, take: Int, skip: Int, _count: CommentCountAggregateInput, _min: CommentMinAggregateInput, _max: CommentMaxAggregateInput): AggregateComment!
  profile(where: ProfileWhereUniqueInput!): Profile!
  profileFirst(where: ProfileWhereInput, orderBy: [ProfileOrderByWithRelationAndSearchRelevanceInput!], cursor: ProfileWhereUniqueInput, take: Int, skip: Int, distinct: [ProfileScalarFieldEnum!]): Profile!
  profiles(where: ProfileWhereInput, orderBy: [ProfileOrderByWithRelationAndSearchRelevanceInput!], cursor: ProfileWhereUniqueInput, take: Int, skip: Int, distinct: [ProfileScalarFieldEnum!]): [Profile!]!
  profileAggregate(where: ProfileWhereInput, orderBy: [ProfileOrderByWithRelationAndSearchRelevanceInput!], cursor: ProfileWhereUniqueInput, take: Int, skip: Int, _count: ProfileCountAggregateInput, _avg: ProfileAvgAggregateInput, _sum: ProfileSumAggregateInput, _min: ProfileMinAggregateInput, _max: ProfileMaxAggregateInput): AggregateProfile!
  dummy(where: DummyWhereUniqueInput!): Dummy!
  dummyFirst(where: DummyWhereInput, orderBy: [DummyOrderByWithRelationAndSearchRelevanceInput!], cursor: DummyWhereUniqueInput, take: Int, skip: Int, distinct: [DummyScalarFieldEnum!]): Dummy!
  dummys(where: DummyWhereInput, orderBy: [DummyOrderByWithRelationAndSearchRelevanceInput!], cursor: DummyWhereUniqueInput, take: Int, skip: Int, distinct: [DummyScalarFieldEnum!]): [Dummy!]!
  dummyAggregate(where: DummyWhereInput, orderBy: [DummyOrderByWithRelationAndSearchRelevanceInput!], cursor: DummyWhereUniqueInput, take: Int, skip: Int, _count: DummyCountAggregateInput, _avg: DummyAvgAggregateInput, _sum: DummySumAggregateInput, _min: DummyMinAggregateInput, _max: DummyMaxAggregateInput): AggregateDummy!
}

input UserWhereUniqueInput {
  id: String
  email: EmailAddress
  name: String
  email_name: UserEmailNameCompoundUniqueInput
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input UserEmailNameCompoundUniqueInput {
  email: EmailAddress!
  name: String!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  email: StringFilter
  name: StringFilter
  password: StringFilter
  bio: StringNullableFilter
  image: StringNullableFilter
  following: UserListRelationFilter
  followers: UserListRelationFilter
  favoriteArticles: ArticleListRelationFilter
  articles: ArticleListRelationFilter
  comments: CommentListRelationFilter
  countComments: IntNullableFilter
  rating: FloatNullableFilter
  role: EnumRoleNullableFilter
  profile: ProfileWhereInput
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringNullableFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input ArticleListRelationFilter {
  every: ArticleWhereInput
  some: ArticleWhereInput
  none: ArticleWhereInput
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
  id: StringFilter
  slug: StringFilter
  title: StringFilter
  description: StringFilter
  body: StringFilter
  tags: TagListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  favoritesCount: IntFilter
  author: UserWhereInput
  authorId: StringFilter
  favoritedBy: UserListRelationFilter
  comments: CommentListRelationFilter
  active: BoolNullableFilter
}

input TagListRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: StringFilter
  name: StringFilter
  articles: ArticleListRelationFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input CommentListRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  body: StringFilter
  author: UserWhereInput
  authorId: StringFilter
  article: ArticleWhereInput
  articleId: StringNullableFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input NestedFloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input EnumRoleNullableFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleNullableFilter
}

input NestedEnumRoleNullableFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleNullableFilter
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  id: IntFilter
  user: UserWhereInput
  userId: StringFilter
  dummy: StringNullableFilter
}

input UserOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  password: SortOrder
  bio: SortOrder
  image: SortOrder
  following: UserOrderByRelationAggregateInput
  followers: UserOrderByRelationAggregateInput
  favoriteArticles: ArticleOrderByRelationAggregateInput
  articles: ArticleOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  countComments: SortOrder
  rating: SortOrder
  role: SortOrder
  profile: ProfileOrderByWithRelationAndSearchRelevanceInput
  _relevance: UserOrderByRelevanceInput
}

enum SortOrder {
  asc
  desc
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input ArticleOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProfileOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  user: UserOrderByWithRelationAndSearchRelevanceInput
  userId: SortOrder
  dummy: SortOrder
  _relevance: ProfileOrderByRelevanceInput
}

input ProfileOrderByRelevanceInput {
  fields: [ProfileOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum ProfileOrderByRelevanceFieldEnum {
  userId
  dummy
}

input UserOrderByRelevanceInput {
  fields: [UserOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum UserOrderByRelevanceFieldEnum {
  id
  email
  name
  password
  bio
  image
}

enum UserScalarFieldEnum {
  id
  email
  name
  password
  bio
  image
  countComments
  rating
  role
}

input UserCountAggregateInput {
  id: Boolean
  email: Boolean
  name: Boolean
  password: Boolean
  bio: Boolean
  image: Boolean
  countComments: Boolean
  rating: Boolean
  role: Boolean
  _all: Boolean
}

input UserAvgAggregateInput {
  countComments: Boolean
  rating: Boolean
}

input UserSumAggregateInput {
  countComments: Boolean
  rating: Boolean
}

input UserMinAggregateInput {
  id: Boolean
  email: Boolean
  name: Boolean
  password: Boolean
  bio: Boolean
  image: Boolean
  countComments: Boolean
  rating: Boolean
  role: Boolean
}

input UserMaxAggregateInput {
  id: Boolean
  email: Boolean
  name: Boolean
  password: Boolean
  bio: Boolean
  image: Boolean
  countComments: Boolean
  rating: Boolean
  role: Boolean
}

input TagWhereUniqueInput {
  id: String
  name: String
}

input TagOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  name: SortOrder
  articles: ArticleOrderByRelationAggregateInput
  _relevance: TagOrderByRelevanceInput
}

input TagOrderByRelevanceInput {
  fields: [TagOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum TagOrderByRelevanceFieldEnum {
  id
  name
}

enum TagScalarFieldEnum {
  id
  name
}

input TagCountAggregateInput {
  id: Boolean
  name: Boolean
  _all: Boolean
}

input TagMinAggregateInput {
  id: Boolean
  name: Boolean
}

input TagMaxAggregateInput {
  id: Boolean
  name: Boolean
}

input ArticleWhereUniqueInput {
  id: String
  slug: String
}

input ArticleOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  slug: SortOrder
  title: SortOrder
  description: SortOrder
  body: SortOrder
  tags: TagOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
  favoritesCount: SortOrder
  author: UserOrderByWithRelationAndSearchRelevanceInput
  authorId: SortOrder
  favoritedBy: UserOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  active: SortOrder
  _relevance: ArticleOrderByRelevanceInput
}

input TagOrderByRelationAggregateInput {
  _count: SortOrder
}

input ArticleOrderByRelevanceInput {
  fields: [ArticleOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum ArticleOrderByRelevanceFieldEnum {
  id
  slug
  title
  description
  body
  authorId
}

enum ArticleScalarFieldEnum {
  id
  slug
  title
  description
  body
  createdAt
  updatedAt
  favoritesCount
  authorId
  active
}

input ArticleCountAggregateInput {
  id: Boolean
  slug: Boolean
  title: Boolean
  description: Boolean
  body: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  favoritesCount: Boolean
  authorId: Boolean
  active: Boolean
  _all: Boolean
}

input ArticleAvgAggregateInput {
  favoritesCount: Boolean
}

input ArticleSumAggregateInput {
  favoritesCount: Boolean
}

input ArticleMinAggregateInput {
  id: Boolean
  slug: Boolean
  title: Boolean
  description: Boolean
  body: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  favoritesCount: Boolean
  authorId: Boolean
  active: Boolean
}

input ArticleMaxAggregateInput {
  id: Boolean
  slug: Boolean
  title: Boolean
  description: Boolean
  body: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  favoritesCount: Boolean
  authorId: Boolean
  active: Boolean
}

input CommentWhereUniqueInput {
  id: String
}

input CommentOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  body: SortOrder
  author: UserOrderByWithRelationAndSearchRelevanceInput
  authorId: SortOrder
  article: ArticleOrderByWithRelationAndSearchRelevanceInput
  articleId: SortOrder
  _relevance: CommentOrderByRelevanceInput
}

input CommentOrderByRelevanceInput {
  fields: [CommentOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum CommentOrderByRelevanceFieldEnum {
  id
  body
  authorId
  articleId
}

enum CommentScalarFieldEnum {
  id
  createdAt
  updatedAt
  body
  authorId
  articleId
}

input CommentCountAggregateInput {
  id: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  body: Boolean
  authorId: Boolean
  articleId: Boolean
  _all: Boolean
}

input CommentMinAggregateInput {
  id: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  body: Boolean
  authorId: Boolean
  articleId: Boolean
}

input CommentMaxAggregateInput {
  id: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  body: Boolean
  authorId: Boolean
  articleId: Boolean
}

input ProfileWhereUniqueInput {
  id: Int
  userId: String
}

enum ProfileScalarFieldEnum {
  id
  userId
  dummy
}

input ProfileCountAggregateInput {
  id: Boolean
  userId: Boolean
  dummy: Boolean
  _all: Boolean
}

input ProfileAvgAggregateInput {
  id: Boolean
}

input ProfileSumAggregateInput {
  id: Boolean
}

input ProfileMinAggregateInput {
  id: Boolean
  userId: Boolean
  dummy: Boolean
}

input ProfileMaxAggregateInput {
  id: Boolean
  userId: Boolean
  dummy: Boolean
}

input DummyWhereUniqueInput {
  id: String
}

input DummyWhereInput {
  AND: [DummyWhereInput!]
  OR: [DummyWhereInput!]
  NOT: [DummyWhereInput!]
  id: StringFilter
  created: DateTimeFilter
  floaty: FloatFilter
  int: IntNullableFilter
  float: FloatNullableFilter
  bytes: BytesNullableFilter
  decimal: DecimalNullableFilter
  bigInt: BigIntNullableFilter
  json: JsonNullableFilter
  friends: StringNullableListFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input BytesNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  not: NestedBytesNullableFilter
}

input NestedBytesNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  not: NestedBytesNullableFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalNullableFilter
}

input NestedDecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalNullableFilter
}

input BigIntNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedBigIntNullableFilter
}

input NestedBigIntNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  not: NestedBigIntNullableFilter
}

input JsonNullableFilter {
  equals: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input DummyOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  created: SortOrder
  floaty: SortOrder
  int: SortOrder
  float: SortOrder
  bytes: SortOrder
  decimal: SortOrder
  bigInt: SortOrder
  json: SortOrder
  friends: SortOrder
  _relevance: DummyOrderByRelevanceInput
}

input DummyOrderByRelevanceInput {
  fields: [DummyOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum DummyOrderByRelevanceFieldEnum {
  id
  friends
}

enum DummyScalarFieldEnum {
  id
  created
  floaty
  int
  float
  bytes
  decimal
  bigInt
  json
  friends
}

input DummyCountAggregateInput {
  id: Boolean
  created: Boolean
  floaty: Boolean
  int: Boolean
  float: Boolean
  bytes: Boolean
  decimal: Boolean
  bigInt: Boolean
  json: Boolean
  friends: Boolean
  _all: Boolean
}

input DummyAvgAggregateInput {
  floaty: Boolean
  int: Boolean
  float: Boolean
  decimal: Boolean
  bigInt: Boolean
}

input DummySumAggregateInput {
  floaty: Boolean
  int: Boolean
  float: Boolean
  decimal: Boolean
  bigInt: Boolean
}

input DummyMinAggregateInput {
  id: Boolean
  created: Boolean
  floaty: Boolean
  int: Boolean
  float: Boolean
  bytes: Boolean
  decimal: Boolean
  bigInt: Boolean
}

input DummyMaxAggregateInput {
  id: Boolean
  created: Boolean
  floaty: Boolean
  int: Boolean
  float: Boolean
  bytes: Boolean
  decimal: Boolean
  bigInt: Boolean
}

type Mutation {
  createOneUser(data: UserCreateInput!): User
  deleteOneUser(where: UserWhereUniqueInput!): User
  createManyUsers(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRows
  deleteManyUsers(where: UserWhereInput): AffectedRows
  createOneTag(data: TagCreateInput!): Tag
  deleteOneTag(where: TagWhereUniqueInput!): Tag
  createManyTags(data: [TagCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): AffectedRows
  deleteManyTags(where: TagWhereInput): AffectedRows
  createOneArticle(data: ArticleCreateInput!): Article
  deleteOneArticle(where: ArticleWhereUniqueInput!): Article
  createManyArticles(data: [ArticleCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  updateManyArticles(data: ArticleUpdateManyMutationInput!, where: ArticleWhereInput): AffectedRows
  deleteManyArticles(where: ArticleWhereInput): AffectedRows
  createOneComment(data: CommentCreateInput!): Comment
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  createManyComments(data: [CommentCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): AffectedRows
  deleteManyComments(where: CommentWhereInput): AffectedRows
  createOneProfile(data: ProfileCreateInput!): Profile
  deleteOneProfile(where: ProfileWhereUniqueInput!): Profile
  createManyProfiles(data: [ProfileCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  updateManyProfiles(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): AffectedRows
  deleteManyProfiles(where: ProfileWhereInput): AffectedRows
  createOneDummy(data: DummyCreateInput!): Dummy
  deleteOneDummy(where: DummyWhereUniqueInput!): Dummy
  createManyDummys(data: [DummyCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  updateManyDummys(data: DummyUpdateManyMutationInput!, where: DummyWhereInput): AffectedRows
  deleteManyDummys(where: DummyWhereInput): AffectedRows
}

input UserCreateInput {
  id: String
  email: EmailAddress!
  name: String!
  password: String!
  bio: String
  image: String
  following: UserCreateNestedManyWithoutFollowersInput
  followers: UserCreateNestedManyWithoutFollowingInput
  favoriteArticles: ArticleCreateNestedManyWithoutFavoritedByInput
  articles: ArticleCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  countComments: Int
  rating: Float
  role: Role
  profile: ProfileCreateNestedOneWithoutUserInput
}

input UserCreateNestedManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutFollowersInput {
  id: String
  email: EmailAddress!
  name: String!
  password: String!
  bio: String
  image: String
  following: UserCreateNestedManyWithoutFollowersInput
  favoriteArticles: ArticleCreateNestedManyWithoutFavoritedByInput
  articles: ArticleCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  countComments: Int
  rating: Float
  role: Role
  profile: ProfileCreateNestedOneWithoutUserInput
}

input ArticleCreateNestedManyWithoutFavoritedByInput {
  create: [ArticleCreateWithoutFavoritedByInput!]
  connectOrCreate: [ArticleCreateOrConnectWithoutFavoritedByInput!]
  connect: [ArticleWhereUniqueInput!]
}

input ArticleCreateWithoutFavoritedByInput {
  id: String
  slug: String!
  title: String!
  description: String!
  body: String!
  tags: TagCreateNestedManyWithoutArticlesInput
  updatedAt: DateTime
  favoritesCount: Int
  author: UserCreateNestedOneWithoutArticlesInput!
  comments: CommentCreateNestedManyWithoutArticleInput
  active: Boolean
}

input TagCreateNestedManyWithoutArticlesInput {
  create: [TagCreateWithoutArticlesInput!]
  connectOrCreate: [TagCreateOrConnectWithoutArticlesInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutArticlesInput {
  id: String
  name: String!
}

input TagCreateOrConnectWithoutArticlesInput {
  where: TagWhereUniqueInput!
  create: TagCreateWithoutArticlesInput!
}

input UserCreateNestedOneWithoutArticlesInput {
  create: UserCreateWithoutArticlesInput
  connectOrCreate: UserCreateOrConnectWithoutArticlesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutArticlesInput {
  id: String
  email: EmailAddress!
  name: String!
  password: String!
  bio: String
  image: String
  following: UserCreateNestedManyWithoutFollowersInput
  followers: UserCreateNestedManyWithoutFollowingInput
  favoriteArticles: ArticleCreateNestedManyWithoutFavoritedByInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  countComments: Int
  rating: Float
  role: Role
  profile: ProfileCreateNestedOneWithoutUserInput
}

input UserCreateNestedManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowingInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutFollowingInput {
  id: String
  email: EmailAddress!
  name: String!
  password: String!
  bio: String
  image: String
  followers: UserCreateNestedManyWithoutFollowingInput
  favoriteArticles: ArticleCreateNestedManyWithoutFavoritedByInput
  articles: ArticleCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  countComments: Int
  rating: Float
  role: Role
  profile: ProfileCreateNestedOneWithoutUserInput
}

input ArticleCreateNestedManyWithoutAuthorInput {
  create: [ArticleCreateWithoutAuthorInput!]
  connectOrCreate: [ArticleCreateOrConnectWithoutAuthorInput!]
  createMany: ArticleCreateManyAuthorInputEnvelope
  connect: [ArticleWhereUniqueInput!]
}

input ArticleCreateWithoutAuthorInput {
  id: String
  slug: String!
  title: String!
  description: String!
  body: String!
  tags: TagCreateNestedManyWithoutArticlesInput
  updatedAt: DateTime
  favoritesCount: Int
  favoritedBy: UserCreateNestedManyWithoutFavoriteArticlesInput
  comments: CommentCreateNestedManyWithoutArticleInput
  active: Boolean
}

input UserCreateNestedManyWithoutFavoriteArticlesInput {
  create: [UserCreateWithoutFavoriteArticlesInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFavoriteArticlesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutFavoriteArticlesInput {
  id: String
  email: EmailAddress!
  name: String!
  password: String!
  bio: String
  image: String
  following: UserCreateNestedManyWithoutFollowersInput
  followers: UserCreateNestedManyWithoutFollowingInput
  articles: ArticleCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  countComments: Int
  rating: Float
  role: Role
  profile: ProfileCreateNestedOneWithoutUserInput
}

input CommentCreateNestedManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  createMany: CommentCreateManyAuthorInputEnvelope
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  body: String!
  article: ArticleCreateNestedOneWithoutCommentsInput
}

input ArticleCreateNestedOneWithoutCommentsInput {
  create: ArticleCreateWithoutCommentsInput
  connectOrCreate: ArticleCreateOrConnectWithoutCommentsInput
  connect: ArticleWhereUniqueInput
}

input ArticleCreateWithoutCommentsInput {
  id: String
  slug: String!
  title: String!
  description: String!
  body: String!
  tags: TagCreateNestedManyWithoutArticlesInput
  updatedAt: DateTime
  favoritesCount: Int
  author: UserCreateNestedOneWithoutArticlesInput!
  favoritedBy: UserCreateNestedManyWithoutFavoriteArticlesInput
  active: Boolean
}

input ArticleCreateOrConnectWithoutCommentsInput {
  where: ArticleWhereUniqueInput!
  create: ArticleCreateWithoutCommentsInput!
}

input CommentCreateOrConnectWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentCreateManyAuthorInputEnvelope {
  data: [CommentCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyAuthorInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  body: String!
  articleId: String
}

input ProfileCreateNestedOneWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutUserInput {
  dummy: String
}

input ProfileCreateOrConnectWithoutUserInput {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutUserInput!
}

input UserCreateOrConnectWithoutFavoriteArticlesInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutFavoriteArticlesInput!
}

input CommentCreateNestedManyWithoutArticleInput {
  create: [CommentCreateWithoutArticleInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutArticleInput!]
  createMany: CommentCreateManyArticleInputEnvelope
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutArticleInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  body: String!
  author: UserCreateNestedOneWithoutCommentsInput!
}

input UserCreateNestedOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: String
  email: EmailAddress!
  name: String!
  password: String!
  bio: String
  image: String
  following: UserCreateNestedManyWithoutFollowersInput
  followers: UserCreateNestedManyWithoutFollowingInput
  favoriteArticles: ArticleCreateNestedManyWithoutFavoritedByInput
  articles: ArticleCreateNestedManyWithoutAuthorInput
  countComments: Int
  rating: Float
  role: Role
  profile: ProfileCreateNestedOneWithoutUserInput
}

input UserCreateOrConnectWithoutCommentsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCommentsInput!
}

input CommentCreateOrConnectWithoutArticleInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutArticleInput!
}

input CommentCreateManyArticleInputEnvelope {
  data: [CommentCreateManyArticleInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyArticleInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  body: String!
  authorId: String!
}

input ArticleCreateOrConnectWithoutAuthorInput {
  where: ArticleWhereUniqueInput!
  create: ArticleCreateWithoutAuthorInput!
}

input ArticleCreateManyAuthorInputEnvelope {
  data: [ArticleCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input ArticleCreateManyAuthorInput {
  id: String
  slug: String!
  title: String!
  description: String!
  body: String!
  updatedAt: DateTime
  favoritesCount: Int
  active: Boolean
}

input UserCreateOrConnectWithoutFollowingInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutFollowingInput!
}

input UserCreateOrConnectWithoutArticlesInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutArticlesInput!
}

input ArticleCreateOrConnectWithoutFavoritedByInput {
  where: ArticleWhereUniqueInput!
  create: ArticleCreateWithoutFavoritedByInput!
}

input UserCreateOrConnectWithoutFollowersInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutFollowersInput!
}

input UserCreateManyInput {
  id: String
  email: EmailAddress!
  name: String!
  password: String!
  bio: String
  image: String
  countComments: Int
  rating: Float
  role: Role
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  countComments: NullableIntFieldUpdateOperationsInput
  rating: NullableFloatFieldUpdateOperationsInput
  role: NullableEnumRoleFieldUpdateOperationsInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input NullableFloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input NullableEnumRoleFieldUpdateOperationsInput {
  set: Role
}

input TagCreateInput {
  id: String
  name: String!
  articles: ArticleCreateNestedManyWithoutTagsInput
}

input ArticleCreateNestedManyWithoutTagsInput {
  create: [ArticleCreateWithoutTagsInput!]
  connectOrCreate: [ArticleCreateOrConnectWithoutTagsInput!]
  connect: [ArticleWhereUniqueInput!]
}

input ArticleCreateWithoutTagsInput {
  id: String
  slug: String!
  title: String!
  description: String!
  body: String!
  updatedAt: DateTime
  favoritesCount: Int
  author: UserCreateNestedOneWithoutArticlesInput!
  favoritedBy: UserCreateNestedManyWithoutFavoriteArticlesInput
  comments: CommentCreateNestedManyWithoutArticleInput
  active: Boolean
}

input ArticleCreateOrConnectWithoutTagsInput {
  where: ArticleWhereUniqueInput!
  create: ArticleCreateWithoutTagsInput!
}

input TagCreateManyInput {
  id: String
  name: String!
}

input TagUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ArticleCreateInput {
  id: String
  slug: String!
  title: String!
  description: String!
  body: String!
  tags: TagCreateNestedManyWithoutArticlesInput
  updatedAt: DateTime
  favoritesCount: Int
  author: UserCreateNestedOneWithoutArticlesInput!
  favoritedBy: UserCreateNestedManyWithoutFavoriteArticlesInput
  comments: CommentCreateNestedManyWithoutArticleInput
  active: Boolean
}

input ArticleCreateManyInput {
  id: String
  slug: String!
  title: String!
  description: String!
  body: String!
  updatedAt: DateTime
  favoritesCount: Int
  authorId: String!
  active: Boolean
}

input ArticleUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  favoritesCount: IntFieldUpdateOperationsInput
  active: NullableBoolFieldUpdateOperationsInput
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input CommentCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  body: String!
  author: UserCreateNestedOneWithoutCommentsInput!
  article: ArticleCreateNestedOneWithoutCommentsInput
}

input CommentCreateManyInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  body: String!
  authorId: String!
  articleId: String
}

input CommentUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
}

input ProfileCreateInput {
  user: UserCreateNestedOneWithoutProfileInput!
  dummy: String
}

input UserCreateNestedOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProfileInput {
  id: String
  email: EmailAddress!
  name: String!
  password: String!
  bio: String
  image: String
  following: UserCreateNestedManyWithoutFollowersInput
  followers: UserCreateNestedManyWithoutFollowingInput
  favoriteArticles: ArticleCreateNestedManyWithoutFavoritedByInput
  articles: ArticleCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  countComments: Int
  rating: Float
  role: Role
}

input UserCreateOrConnectWithoutProfileInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProfileInput!
}

input ProfileCreateManyInput {
  id: Int
  userId: String!
  dummy: String
}

input ProfileUpdateManyMutationInput {
  dummy: NullableStringFieldUpdateOperationsInput
}

input DummyCreateInput {
  id: String!
  created: DateTime
  floaty: Float!
  int: Int
  float: Float
  bytes: String
  decimal: Decimal
  bigInt: String
  json: JSON
  friends: DummyCreatefriendsInput
}

input DummyCreatefriendsInput {
  set: [String!]!
}

input DummyCreateManyInput {
  id: String!
  created: DateTime
  floaty: Float!
  int: Int
  float: Float
  bytes: String
  decimal: Decimal
  bigInt: String
  json: JSON
  friends: DummyCreatefriendsInput
}

input DummyUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  created: DateTimeFieldUpdateOperationsInput
  floaty: FloatFieldUpdateOperationsInput
  int: NullableIntFieldUpdateOperationsInput
  float: NullableFloatFieldUpdateOperationsInput
  bytes: NullableBytesFieldUpdateOperationsInput
  decimal: NullableDecimalFieldUpdateOperationsInput
  bigInt: NullableBigIntFieldUpdateOperationsInput
  json: JSON
  friends: DummyUpdatefriendsInput
}

input FloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input NullableBytesFieldUpdateOperationsInput {
  set: String
}

input NullableDecimalFieldUpdateOperationsInput {
  set: Decimal
  increment: Decimal
  decrement: Decimal
  multiply: Decimal
  divide: Decimal
}

input NullableBigIntFieldUpdateOperationsInput {
  set: String
  increment: String
  decrement: String
  multiply: String
  divide: String
}

input DummyUpdatefriendsInput {
  set: [String!]
  push: [String!]
}