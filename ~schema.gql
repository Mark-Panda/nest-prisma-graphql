# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

directive @lower on FIELD_DEFINITION

"""用户信息"""
type User {
  id: ID!
  create_date: DateTime!
  update_date: DateTime!
  email: String!

  """User's name"""
  username: String!
  reg_ip: String
  login_ip: String
  login_date: DateTime
  phone: String!
  nickname: String
  avatar: String
  role: Role
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Role {
  USER
  SYSTEM
  ADMIN
}

type UserCountAggregate {
  id: Int!
  create_date: Int!
  update_date: Int!
  email: Int!
  username: Int!
  reg_ip: Int!
  login_ip: Int!
  login_date: Int!
  phone: Int!
  nickname: Int!
  avatar: Int!
  role: Int!
  _all: Int!
}

type UserMinAggregate {
  id: String
  create_date: DateTime
  update_date: DateTime
  email: String
  username: String
  reg_ip: String
  login_ip: String
  login_date: DateTime
  phone: String
  nickname: String
  avatar: String
  role: Role
}

type UserMaxAggregate {
  id: String
  create_date: DateTime
  update_date: DateTime
  email: String
  username: String
  reg_ip: String
  login_ip: String
  login_date: DateTime
  phone: String
  nickname: String
  avatar: String
  role: Role
}

type AggregateUser {
  _count: UserCountAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

type UserGroupBy {
  id: String!
  create_date: DateTime!
  update_date: DateTime!
  email: String!
  username: String!
  reg_ip: String
  login_ip: String
  login_date: DateTime
  phone: String!
  nickname: String
  avatar: String
  role: Role
  _count: UserCountAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

type AffectedRows {
  count: Int!
}

"""Simple 描述"""
type Simple {
  """Simple的邮件地址"""
  email: String!

  """simple 的名字"""
  name: String!
}

type Query {
  user(where: UserWhereUniqueInput!): User!
  userFirst(where: UserWhereInput, orderBy: [UserOrderByWithRelationAndSearchRelevanceInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): User!
  users(where: UserWhereInput, orderBy: [UserOrderByWithRelationAndSearchRelevanceInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  userAggregate(where: UserWhereInput, orderBy: [UserOrderByWithRelationAndSearchRelevanceInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, _count: UserCountAggregateInput, _min: UserMinAggregateInput, _max: UserMaxAggregateInput): AggregateUser!
  userGroupBy(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput!], by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int, _count: UserCountAggregateInput, _min: UserMinAggregateInput, _max: UserMaxAggregateInput): [UserGroupBy!]!
  simple(data: String!): Simple!
}

input UserWhereUniqueInput {
  id: String
  email: EmailAddress
  username: String
  email_username: UserEmailUsernameCompoundUniqueInput
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input UserEmailUsernameCompoundUniqueInput {
  email: EmailAddress!
  username: String!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  create_date: DateTimeFilter
  update_date: DateTimeFilter
  email: StringFilter
  username: StringFilter
  password: StringFilter
  reg_ip: StringNullableFilter
  login_ip: StringNullableFilter
  login_date: DateTimeNullableFilter
  phone: StringFilter
  nickname: StringNullableFilter
  avatar: StringNullableFilter
  role: EnumRoleNullableFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input EnumRoleNullableFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleNullableFilter
}

input NestedEnumRoleNullableFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleNullableFilter
}

input UserOrderByWithRelationAndSearchRelevanceInput {
  id: SortOrder
  create_date: SortOrder
  update_date: SortOrder
  email: SortOrder
  username: SortOrder
  password: SortOrder
  reg_ip: SortOrder
  login_ip: SortOrder
  login_date: SortOrder
  phone: SortOrder
  nickname: SortOrder
  avatar: SortOrder
  role: SortOrder
  _relevance: UserOrderByRelevanceInput
}

enum SortOrder {
  asc
  desc
}

input UserOrderByRelevanceInput {
  fields: [UserOrderByRelevanceFieldEnum!]!
  sort: SortOrder!
  search: String!
}

enum UserOrderByRelevanceFieldEnum {
  id
  email
  username
  password
  reg_ip
  login_ip
  phone
  nickname
  avatar
}

enum UserScalarFieldEnum {
  id
  create_date
  update_date
  email
  username
  password
  reg_ip
  login_ip
  login_date
  phone
  nickname
  avatar
  role
}

input UserCountAggregateInput {
  id: Boolean
  create_date: Boolean
  update_date: Boolean
  email: Boolean
  username: Boolean
  password: Boolean
  reg_ip: Boolean
  login_ip: Boolean
  login_date: Boolean
  phone: Boolean
  nickname: Boolean
  avatar: Boolean
  role: Boolean
  _all: Boolean
}

input UserMinAggregateInput {
  id: Boolean
  create_date: Boolean
  update_date: Boolean
  email: Boolean
  username: Boolean
  password: Boolean
  reg_ip: Boolean
  login_ip: Boolean
  login_date: Boolean
  phone: Boolean
  nickname: Boolean
  avatar: Boolean
  role: Boolean
}

input UserMaxAggregateInput {
  id: Boolean
  create_date: Boolean
  update_date: Boolean
  email: Boolean
  username: Boolean
  password: Boolean
  reg_ip: Boolean
  login_ip: Boolean
  login_date: Boolean
  phone: Boolean
  nickname: Boolean
  avatar: Boolean
  role: Boolean
}

input UserOrderByWithAggregationInput {
  id: SortOrder
  create_date: SortOrder
  update_date: SortOrder
  email: SortOrder
  username: SortOrder
  password: SortOrder
  reg_ip: SortOrder
  login_ip: SortOrder
  login_date: SortOrder
  phone: SortOrder
  nickname: SortOrder
  avatar: SortOrder
  role: SortOrder
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
}

input UserCountOrderByAggregateInput {
  id: SortOrder
  create_date: SortOrder
  update_date: SortOrder
  email: SortOrder
  username: SortOrder
  password: SortOrder
  reg_ip: SortOrder
  login_ip: SortOrder
  login_date: SortOrder
  phone: SortOrder
  nickname: SortOrder
  avatar: SortOrder
  role: SortOrder
}

input UserMaxOrderByAggregateInput {
  id: SortOrder
  create_date: SortOrder
  update_date: SortOrder
  email: SortOrder
  username: SortOrder
  password: SortOrder
  reg_ip: SortOrder
  login_ip: SortOrder
  login_date: SortOrder
  phone: SortOrder
  nickname: SortOrder
  avatar: SortOrder
  role: SortOrder
}

input UserMinOrderByAggregateInput {
  id: SortOrder
  create_date: SortOrder
  update_date: SortOrder
  email: SortOrder
  username: SortOrder
  password: SortOrder
  reg_ip: SortOrder
  login_ip: SortOrder
  login_date: SortOrder
  phone: SortOrder
  nickname: SortOrder
  avatar: SortOrder
  role: SortOrder
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  create_date: DateTimeWithAggregatesFilter
  update_date: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  username: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
  reg_ip: StringNullableWithAggregatesFilter
  login_ip: StringNullableWithAggregatesFilter
  login_date: DateTimeNullableWithAggregatesFilter
  phone: StringWithAggregatesFilter
  nickname: StringNullableWithAggregatesFilter
  avatar: StringNullableWithAggregatesFilter
  role: EnumRoleNullableWithAggregatesFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input DateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input NestedDateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input StringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedStringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  search: String
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input DateTimeNullableWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedDateTimeNullableFilter
  _max: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedDateTimeNullableFilter
  _max: NestedDateTimeNullableFilter
}

input EnumRoleNullableWithAggregatesFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedEnumRoleNullableFilter
  _max: NestedEnumRoleNullableFilter
}

input NestedEnumRoleNullableWithAggregatesFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedEnumRoleNullableFilter
  _max: NestedEnumRoleNullableFilter
}

type Mutation {
  createOneUser(data: UserCreateInput!): User
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User
  deleteOneUser(where: UserWhereUniqueInput!): User
  createManyUsers(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRows
  deleteManyUsers(where: UserWhereInput): AffectedRows
}

input UserCreateInput {
  id: String
  create_date: DateTime
  update_date: DateTime
  email: EmailAddress!
  username: String!
  password: String!
  reg_ip: String
  login_ip: String
  login_date: DateTime
  phone: String!
  nickname: String
  avatar: String
  role: Role
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  create_date: DateTimeFieldUpdateOperationsInput
  update_date: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  reg_ip: NullableStringFieldUpdateOperationsInput
  login_ip: NullableStringFieldUpdateOperationsInput
  login_date: NullableDateTimeFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  nickname: NullableStringFieldUpdateOperationsInput
  avatar: NullableStringFieldUpdateOperationsInput
  role: NullableEnumRoleFieldUpdateOperationsInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumRoleFieldUpdateOperationsInput {
  set: Role
}

input UserCreateManyInput {
  id: String
  create_date: DateTime
  update_date: DateTime
  email: EmailAddress!
  username: String!
  password: String!
  reg_ip: String
  login_ip: String
  login_date: DateTime
  phone: String!
  nickname: String
  avatar: String
  role: Role
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  create_date: DateTimeFieldUpdateOperationsInput
  update_date: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  reg_ip: NullableStringFieldUpdateOperationsInput
  login_ip: NullableStringFieldUpdateOperationsInput
  login_date: NullableDateTimeFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  nickname: NullableStringFieldUpdateOperationsInput
  avatar: NullableStringFieldUpdateOperationsInput
  role: NullableEnumRoleFieldUpdateOperationsInput
}